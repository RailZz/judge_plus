<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"> <html><!--
 Archive processed by SingleFile 
 url: https://informatics.msk.ru/moodle/mod/statements/print3.php?id=33356 
 saved date: Tue Aug 14 2018 22:59:58 GMT+0300 (MSK) 
--><meta charset=utf-8>
<title>Параллель B. Зачет</title>
<style>.problem-statement{margin:.5em;font-family:verdana;line-height:1.5em;font-size:14px}.problem-statement p{margin:0 0 1em}.problem-statement .legend{margin-bottom:1em}.problem-statement .section-title{font-family:arial;font-size:115%;font-weight:bold}.problem-statement .output-specification{margin-bottom:1em}.problem-statement .sample-tests .input,.problem-statement .sample-tests .output{border:1px solid #888}.problem-statement .sample-tests .output{margin-bottom:1em;position:relative;top:-1px}.problem-statement .sample-tests pre{line-height:1.25em;padding:.25em;margin:0;background-color:#efefef}.problem-statement .sample-tests .title{font-family:arial;padding:.25em;border-bottom:1px solid #888;text-transform:lowercase;font-weight:bold}.problem-statement .tex-span{font-size:125%;font-family:"times new roman"}</style>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta http-equiv=Content-Type content="text/html; charset=">
<meta name=description content="Параллель B. Зачет">
<style>h1,h2,h3,h4,h5,h6{margin-left:0;font-family:"Times New Roman",Times,serif;break-after:avoid;break-inside:avoid}.statements_title{margin-left:-40px;font-family:Tahoma,Verdana,Arial,Helvetica,sans-serif;font-size:3em;font-weight:bold;margin-top:120px;margin-bottom:30px;text-align:center}.statements_summary{margin-left:-40px;text-align:center;margin-bottom:120px}.statements_chapter_title{font-family:Tahoma,Verdana,Arial,Helvetica,sans-serif;text-align:left;font-size:1.7em;font-weight:bold;border-style:solid;border-width:0 0 1px;margin-left:0;margin-bottom:20px}.statements_chapter{break-before:page}body{margin-left:50px;margin-right:10px;color:#000;background-color:#fff;font-family:"Times New Roman",Times,serif;font-size:1em;font-weight:normal;text-decoration:none}font{color:#000;background-color:#eee;font-family:"Times New Roman",Times,serif;font-size:1em;font-weight:normal;text-decoration:none}</style>
<link type=image/x-icon rel="shortcut icon" href=data:image/x-icon;base64,></head> <body contenteditable=false> <a name=top></a> <p class=statements_title>Параллель B. Зачет</p> <p class=statements_summary></p>  <div class=statements_toc_alpha><a name=toc></a><p class=statements_chapter_title>Список задач<ul><li><a href=#ch1043><b>Задача A.</b> Олимпиада по алхимии</a><li><a href=#ch1364><b>Задача B.</b> Сугробы на ЛЭП</a><li><a href=#ch111749><b>Задача C.</b> Бензин</a><li><a href=#ch50001><b>Задача D. Да, мы так не похожи</b></a></ul></div><hr><div class=statements_chapter><h1><a name=ch1043>Олимпиада по алхимии</a></h1><p class=statements_chapter_title><b>Задача A.</b> Олимпиада по алхимии<div class=problem-statement> <div class=legend> <p>В государстве алхимиков есть <em>N</em> населённых пунктов, пронумерованных числами от 1 до <span><em>N</em></span>, и <em>M</em> дорог. Населённые пункты бывают двух типов: деревни и города. Кроме того, в государстве есть одна столица (она может располагаться как в городе, так и в деревне). Каждая дорога соединяет два населённых пункта, и для проезда по ней требуется <em>T</em><sub><em>i</em></sub> минут. В столице было решено провести 1-ю государственную командную олимпиаду по алхимии. Для этого во все города из столицы были отправлены гонцы (по одному гонцу на город) с информацией про олимпиаду. </p> <p>Напишите программу, которая посчитает, в каком порядке и через какое время каждый из гонцов доберётся до своего города. Считается, что гонец во время пути не спит и нигде не задерживается.</p> </div> <div class=input-specification> <div class=section-title> Входные данные </div> <p>Во входном файле сначала записаны 3 числа <span><em>N</em></span>, <span><em>M</em></span>, <span><em>K</em></span> — количество населенных пунктов, количество дорог и количество городов (2<font face="Symbol, serif"></font><span><em>N</em></span><font face="Symbol, serif"></font>1000, 1<font face="Symbol, serif"></font><span><em>M</em></span><font face="Symbol, serif"></font>10000, 1<font face="Symbol, serif"></font><span><em>K</em></span><font face="Symbol, serif"></font><span><em>N</em></span>). Далее записан номер столицы <span><em>C</em></span> (1<font face="Symbol, serif"></font><span><em>C</em></span><font face="Symbol, serif"></font><span><em>N</em></span>). Следующие <span><em>K</em></span> чисел задают номера городов. Далее следуют <span><em>M</em></span> троек чисел <span><em>S</em></span><sub><span><em>i</em></span></sub>, <span><em>E</em></span><sub><span><em>i</em></span></sub>, <span><em>T</em></span><sub><span><em>i</em></span></sub>, описывающих дороги: <span><em>S</em></span><sub><span><em>i</em></span></sub> и <span><em>E</em></span><sub><span><em>i</em></span></sub> — номера населенных пунктов, которые соединяет данная дорога, а <span><em>T</em></span><sub><span><em>i</em></span></sub> — время для проезда по ней (1<font face="Symbol, serif"></font><span><em>T</em></span><sub><span><em>i</em></span></sub><font face="Symbol, serif"></font>100).</p> <p>Гарантируется, что до каждого города из столицы можно добраться по дорогам (возможно, через другие населенные пункты).</p> </div> <div class=output-specification> <div class=section-title> Выходные данные </div> <p>Выведите в выходной файл <span><em>K</em></span> пар чисел: для каждого города должен быть выведен его номер и минимальное время, когда гонец может в нем оказаться (время измеряется в минутах с того момента, как гонцы выехали из столицы). Пары в выходном файле должны быть упорядочены по времени прибытия гонца.</p> </div> </div>
<div class=problem-statement><div class=sample-tests><div class=section-title>Примеры</div><div class=sample-test><div class=input><div class=title>Входные данные</div><pre class=content>5 4 5 1
1 2 3 4 5
1 2 1
2 3 10
3 4 100
4 5 100

</pre></div><div class=output><div class=title>Выходные данные</div><pre class=content>1 0
2 1
3 11
4 111
5 211
</pre></div></div><div class=sample-test><div class=input><div class=title>Входные данные</div><pre class=content>5 5 3 1
2 4 5
2 1 1
2 3 10
3 4 100
4 5 100
1 5 1

</pre></div><div class=output><div class=title>Выходные данные</div><pre class=content>5 1
2 1
4 101
</pre></div></div></div></div></div><hr><div class=statements_chapter><h1><a name=ch1364>Сугробы на ЛЭП</a></h1><p class=statements_chapter_title><b>Задача B.</b> Сугробы на ЛЭП<div class=problem-statement> <div class=legend> <p>Служба электроснабжения проводит мониторинг уровня снега, лежащего на ЛЭП Нью-Васюки - Москва. Вся ЛЭП разбивается на участки опорами. Снег имеет свойства падать на какой-либо интервал ЛЭП, если там уже лежал какой-либо снег, то высота снежного покрова на этом участке суммируется. Также снег имеет тенденцию таять на участке трассы в результате оттепели, при этом известно, что не бывает сугробов отрицательной высоты. Энергетикам крайне важно уметь узнавать суммарную высоту снежного покрова на некоторых последовательных участках, чтобы знать вероятность обрыва проводов.</p> </div> <div class=input-specification> <div class=section-title> Входные данные </div> <p>В первой строке входного файла содержатся два числа: <span>N</span> – (1 ≤ <span>N</span> ≤ 10<span>&nbsp;</span>000) и <span>M</span> – количество команд (1 ≤ <span>M</span> ≤ 50<span>&nbsp;</span>000). Каждая команда имеет вид “1 <span>L</span> <span>R</span> <span>S</span>”, что означает, что на участок с <span>L</span>-ой опоры по <span>R</span>-ую опору выпало <span>S</span> сантиметров снега (<span>S</span> может быть и отрицательным, тогда это означает, что такое количества снега растаяло), или “2 <span>L</span> <span>R</span>” – запрос суммарной высоты снега на участке с <span>L</span>-ой опоры по <span>R</span>-ую. Опоры нумеруются от 0 до <span>N</span>. Гарантируется, что для запросов вида “1 <span>L</span> <span>R</span> <span>S</span>” при S &lt; 0 на каждом участке между опорами L и R уровень снега составляет не менее S. </p> </div> <div class=output-specification> <div class=section-title> Выходные данные </div> <p>На каждую команду 2 (запрос) вы должны выводить число <span>K</span> – суммарную высоту снежного покрова, лежащего на проводах с <span>L</span>-ой опоры по <span>R</span>-ую. Каждое число должно выводиться на новой строке. Известно, что в процессе работы суммарное количество снега на любом интервале не превышает 2<sup>31</sup>.</p> </div> </div> <div class=problem-statement><div class=sample-tests><div class=section-title>Примеры</div><div class=sample-test><div class=input><div class=title>Входные данные</div><pre class=content>10 5
1 0 9 10
1 1 5 -3
2 4 8
1 0 6 25
2 0 2
</pre></div><div class=output><div class=title>Выходные данные</div><pre class=content>37
67
</pre></div></div></div></div></div><hr><div class=statements_chapter><h1><a name=ch111749>Бензин</a></h1><p class=statements_chapter_title><b>Задача C.</b> Бензин<div class=problem-statement><div class=legend><p>Между пунктами с номерами <span class=tex-span>1, 2, ... , <i>N</i>(<i>N</i> ≤ 1500)</span> проложено несколько дорог. Длина каждой дороги известна. По этой системе дорог можно добраться из любого упомянутого пункта в любой другой. Автозаправки расположены только в пунктах. Требуется определить, какое максимальное расстояние без заправки должен быть в состоянии проезжать автомобиль, чтобы без проблем передвигаться между пунктами.</p></div><p><p><div class=input-specification><div class=section-title>Входные данные</div><p><p>В первой строке входного файла находятся числа <span class=tex-span><i>N</i></span> и <span class=tex-span><i>K</i></span> (количество дорог). В следующих K строках указаны пары пунктов, связанных дорогами и расстояние между ними — целое число километров, не превышающее <span class=tex-span>10000</span>.</p></div><p><p><div class=output-specification><div class=section-title>Выходные данные</div><p><p>В выходном файле должно оказаться одно число&nbsp; длина максимального пробега без дозаправки.</p></div><p><p></p></div><div class=problem-statement><div class=sample-tests><div class=section-title>Примеры</div><div class=sample-test><div class=input><div class=title>Входные данные</div><pre class=content>3 2
1 2 5
1 3 10
</pre></div><div class=output><div class=title>Выходные данные</div><pre class=content>10
</pre></div></div></div></div></div><hr><div class=statements_chapter><h1>Да, мы так не похожи</h1><p class=statements_chapter_title><b>Задача D.</b>&nbsp;Да, мы так не похожи<div class=problem-statement> <div class=legend><p style=padding:0;font-family:verdana,serif;>Даже по цвету кожи...<p style=padding:0;font-family:verdana,serif;>Слушая свою любимую песню, Пупа и Лупа играли в "Похожие перестановки". У каждого было&nbsp;<span class=tex-span style=font-size:17.5px;white-space:nowrap;><i>N</i></span>&nbsp;различных карточек от&nbsp;<span class=tex-span style=font-size:17.5px;white-space:nowrap;>1</span>&nbsp;до&nbsp;<span class=tex-span style=font-size:17.5px;white-space:nowrap;><i>N</i></span>, которые они выкладывали в произвольном порядке на пол. После они оценивали похожесть последовательностей по такому принципу — длина наибольшей общей подпоследовательности и есть похожесть.<p style=padding:0;font-family:verdana,serif;>Но в начале очередного хода они перепутали кто выкладывает какие карточки: Лупа выложил за Пупу, а ...<p style=padding:0;font-family:verdana,serif;>Теперь они боятся, что их игра сломалась, и просят вас оценить похожесть выложенных последовательностей за них. Вы, как истинный программист, согласились!</p></div> <div class=input-specification> <div class=section-title> Входные данные </div> <p style=padding:0;font-family:verdana,serif;>В первой строчке дается число&nbsp;<span class=tex-span style=font-size:17.5px;white-space:nowrap;><i>N</i></span>&nbsp;— количество карточек у каждого из игроков.&nbsp;<span class=tex-span style=font-size:17.5px;white-space:nowrap;>(<i>N</i> ≤ 10<sup class=upper-index>5</sup>)</span><p style=padding:0;font-family:verdana,serif;>В следующей строке даются карточки Пупы —&nbsp;<span class=tex-span style=font-size:17.5px;white-space:nowrap;><i>N</i></span>&nbsp;различных чисел, каждое находится в диапазоне от&nbsp;<span class=tex-span style=font-size:17.5px;white-space:nowrap;>1</span>&nbsp;до&nbsp;<span class=tex-span style=font-size:17.5px;white-space:nowrap;><i>N</i></span>.<p style=padding:0;font-family:verdana,serif;>В третьей строке даются карточки Лупы в аналогичном формате.</p> </div> <div class=output-specification> <div class=section-title> Выходные данные </div> <p><span style=font-family:verdana,serif;>Выведите похожесть данных вам последовательностей.</span></p> </div> </div> <div class=problem-statement><div class=sample-tests><div class=section-title><span style=font-size:16.1px;>Примеры</span></div><div class=section-title><p style=padding:0;font-family:verdana,serif;font-size:14px;font-weight:normal;><p style=padding:0;font-family:verdana,serif;font-size:14px;font-weight:normal;><div class=sample-test style=margin:0;padding:0;font-family:verdana,serif;font-size:14px;font-weight:normal;><div class=input style=margin:0;padding:0;><div class=title style=margin:0;>входные данные</div><pre class=content style=font-size:15.4px;>3<br>2 1 3<br>3 1 2<br></pre></div><div class=output style=margin-top:0;margin-right:0;margin-left:0;padding:0;><div class=title style=margin:0;>выходные данные</div><pre class=content style=font-size:15.4px;>1<br></pre></div><div class=input style=margin:0;padding:0;><div class=title style=margin:0;>входные данные</div><pre class=content style=font-size:15.4px;>5<br>3 5 4 1 2<br>2 3 4 1 5<br></pre></div><div class=output style=margin-top:0;margin-right:0;margin-left:0;padding:0;><div class=title style=margin:0;>выходные данные</div><pre class=content style=font-size:15.4px;>3</pre></div></div></div></div></div></div> <autoscroll></autoscroll>
