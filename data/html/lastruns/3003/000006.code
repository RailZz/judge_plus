#include <iostream>
#include <vector>
#include <set>
#include <algorithm>

using namespace std;

const long long inf = 2009000999, SIZE = 60000;

int main() {
    long long N, start, finish;
    cin >> N >> start >> finish;
    start--;
    finish--;
    vector<pair<int, int>> gr[SIZE];
    vector<int> p(N, -1);
    vector<int> ans;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            int l;
            cin >> l;
            if (l > 0) {
                gr[i].push_back({j, l});
            }
        }
    }
    vector<int> d(N, inf);
    d[start] = 0;
    set<pair<int, int>> s;
    s.insert({0, start});
    while (!s.empty()) {
        int v = s.begin() -> second;
        s.erase(s.begin());
        for (auto ul : gr[v]) {
            int u = ul.first, l = ul.second;
            if (d[v] + l < d[u]) {
                s.erase({d[u], u});
                d[u] = d[v] + l;
                p[u] = v;
                s.insert({d[u], u});
            }
        }
    }
    if (d[finish] == inf) {
        cout << -1;
    } else {
        while (finish != -1) {
            ans.push_back(finish);
            finish = p[finish];
        }
        for (int i = ans.size() - 1; i >= 0; i--) {
            cout << ans[i] + 1 << " ";
        }
    }
    return 0;
}
