#include <iostream>
#include <set>
#include <vector>
#include <algorithm>

using namespace std;

const long long SZ = 100228, MCR = 2009000999;

int main()
{
    int n, start, finish;
    cin >> n >> start >> finish;
    vector<pair<int, int>> gr[SZ];
    set<pair<int, int>> s;
    s.insert({0, start - 1});
    vector<int> mcr(n, -1);
    vector<int> lp;
    vector<int> d(n, MCR);
    d[start - 1] = 0;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            int value;
            cin >> value;
            if (value  > 0) {
                gr[i].push_back({j, value});
            }
        }
    }
    while (!s.empty()) {
        int v = s.begin()->second;
        s.erase(s.begin());
        for (auto ul : gr[v]) {
            int u = ul.first;
            int l = ul.second;
            if (d[v] + l < d[u]) {
                s.erase({d[u], u});   //B
                d[u] = d[v] + l;
                mcr[u] = v;
                s.insert({d[u], u});
            }
        }
    }
    --finish;
    if (d[finish] == MCR) {
        cout << -1 << " ";
    } else {
        while (finish != -1) {
            lp.push_back(finish);
            finish = mcr[finish];
        }
        reverse(lp.begin(), lp.end());
        int size = lp.size();
        for (int i = 0; i < size; ++i) {
            cout << (lp[i] + 1) << " ";
        }
    }
}
