#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int main()
{
    int n, m;
    cin >> n >> m;
    vector <vector <int> > used(n, vector <int> (m, 0));
    vector <vector <int> > d(n, vector <int> (m, 0));
    queue <pair <int, int> > q;
    d[0][0] = 1;
    used[0][0] = 1;
    q.push(make_pair(0, 0));
    while(!q.empty())
    {
        pair <int, int> a = q.front();
        q.pop();
        if (a.first + 2 < n && a.second + 1 < m)
        {
            d[a.first + 2][a.second + 1] += d[a.first][a.second];
            if (!used[a.first + 2][a.second + 1])
            {
                q.push({a.first + 2, a.second + 1});
                used[a.first + 2][a.second + 1] = 1;
            }
        }
        if (a.first + 1 < n && a.second + 2 < m)
        {
            d[a.first + 1][a.second + 2] += d[a.first][a.second];
            if (!used[a.first + 1][a.second + 2])
            {
                q.push({a.first + 1, a.second + 2});
                used[a.first + 1][a.second + 2] = 1;
            }
        }
    }
    cout << d[n - 1][m - 1];
    return 0;
}
