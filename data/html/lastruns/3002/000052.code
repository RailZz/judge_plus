#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int n;
vector<vector<int>> gr, rgr;
vector<bool> used;
vector<int> ts;
vector<int> cnt;

void dfsts(int v) {
    used[v] = true;
    for (int u : gr[v]) {
        if (!used[u]) {
            dfsts(u);
        }
    }
    ts.push_back(v);
}

void dfscs(int v, int cur_comp) {
    cnt[cur_comp]++;
    used[v] = true;
    for (int u : rgr[v]) {
        if (!used[u]) {
            dfscs(u, cur_comp);
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int p;
    cin >> n >> p;
    gr.resize(n);
    rgr.resize(n);
    for (int i = 0; i < n; ++i) {
        for (int q = 0; q < n; ++q) {
            char h;
            cin >> h;
            if (h == '+') {
                gr[i].push_back(q);
                rgr[q].push_back(i);
            }
        }
    }
    used.resize(n, false);
    for (int i = 0; i < n; ++i) {
        if (!used[i]) {
            dfsts(i);
        }
    }
    //cerr << "topsort done\n";
    reverse(ts.begin(), ts.end());
    used.assign(n, false);
    int cur_comp = 0;
    for (int v : ts) {
        if (!used[v]) {
            cnt.push_back(0);
            dfscs(v, cur_comp);
            cur_comp++;
        }
    }
    //cerr << "cond done\n";
    int k = cnt[0];
    cout << k << endl;
    if (cur_comp == 1) {
        return 0;
    }
    vector<int> ans(n - k + 1);
    if (cnt[0] > 1 || cnt[1] > 1) {
        ans[cnt[1]] += cnt[0] * cnt[1];
    }
    int s = cnt[1];
    for (int i = 2; i < cur_comp; ++i) {
        s += cnt[i];
        ans[s] += cnt[0] * cnt[i];
    }
    for (int i = 1; i <= n - k; ++i) {
        cout << ans[i] << ' ';
    }
}
