#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

const int size = 22228;

vector<int> gr[size], rgr[size], cgr[size], banditos[size];
vector<int> ts;
int homies[size];
vector<bool> used;

void dfsts(int v)
{
    used[v] = true;
    for (int u : gr[v])
    {
        if (!used[u])
        {
            dfsts(u);
        }
    }
    ts.push_back(v);
}

void dfscs(int v, int hooker)
{
    used[v] = true;
    homies[v] = hooker;
    banditos[hooker].push_back(v);
    for (int i : rgr[v])
    {
        if (!used[i])
        {
            dfscs(i, hooker);
        } else {
            if (homies[i] != hooker)
            {
                cgr[homies[i]].push_back(hooker);
            }
        }
    }
}

int main()
{
    int n, m;
    cin >> n >> m;
    used.assign(n, false);
    for (int i = 0; i < m; ++i)
    {
        int a, b;
        cin >> a >> b;
        gr[a - 1].push_back(b - 1);
        rgr[b - 1].push_back(a - 1);
    }
    for (int i = 0; i < n; ++i)
    {
        if (!used[i])
        {
            dfsts(i);
        }
    }
    reverse(ts.begin(), ts.end());
    used.assign(n, false);
    int hooker = 0;
    for (int i : ts)
    {
        if (!used[i])
        {
            dfscs(i, hooker);
            hooker++;
        }
    }
    cout << hooker << endl;
    for (int i = 0; i < n; ++i)
    {
        cout << homies[i] + 1 << " ";
    }
    return 0;
}
