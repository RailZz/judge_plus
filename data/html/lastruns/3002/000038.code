#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int n, m;
const int SZ = 10228;
vector<int> ts;
vector<bool> used;
vector<int> gr[SZ];
int tin[SZ], tout[SZ];
int timer = 0;

void dfs(int v) {
    used[v] = true;
    tin[v] = timer++;
    for (int u : gr[v]) {
        if (!used[u]) {
            dfs(u);
        }
    }
    tout[v] = timer++;
    ts.push_back(v);
}

int main()
{
    cin >> n >> m;
    vector<pair<int, int>> edges;
    for (int i = 0; i < m; ++i) {
        int u, v;
        cin >> u >> v;
        --u;
        --v;
        gr[u].push_back(v);
        edges.push_back({u, v});
    }
    used.assign(n, false);
    for (int i = 0; i < n; ++i) {
        if (!used[i]) {
            dfs(i);
        }
    }
    reverse(ts.begin(), ts.end());
    
    for (auto& u : edges) {
        if (tout[u.first] < tout[u.second]) {
            cout << "No" << endl;
            return 0;
        }
    }
    cout << "Yes" << endl;
    for (int i = 0; i < n; ++i) {
        cout << ts[i] + 1 << " ";
    }
}