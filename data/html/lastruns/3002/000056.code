#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

vector<vector<int>> banditos;
vector<vector<int>> gr, rgr, cgr;
vector<int> homies;
vector<int> ts;
vector<int> used;

void dfsts(int v)
{
    int i, u;
    used[v] = true;
    for (u : gr[v])
    {
        if (!used[u])
        {
            dfsts(u);
        }
    }
    ts.push_back(v);
}

void dfscs(int v, int cur_comp)
{
    used[v] = true;
    homies[v] = cur_comp;
    banditos[cur_comp].push_back(v);
    for (int u : rgr[v])
    {
        if (!used[u])
        {
            dfscs(u, cur_comp);
        } else if (homies[u] != cur_comp) {
            cgr[homies[u]].push_back(cur_comp);
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int i;
    int u, v;
    int n, m;
    cin >> n >> m;
    banditos.resize(m);
    gr.resize(m);
    rgr.resize(m);
    cgr.resize(m);
    used.assign(n, false);
    homies.resize(m);
    for (int i = 0; i < m; ++i)
    {
        cin >> u >> v;
        gr[u - 1].push_back(v - 1);
        rgr[v - 1].push_back(u - 1);
    }
    for (i = 0; i < n; ++i)
    {
        if (!used[i])
        {
            dfsts(i);
        }
    }
    reverse(ts.begin(), ts.end());
    used.assign(n, false);
    int cur_comp = 0;
    for (int v : ts)
    {
        if (!used[v])
        {
            dfscs(v, cur_comp++);
        }
    }
    cout << cur_comp << endl;
    for (i = 0; i < n; ++i)
    {
        cout << homies[i] + 1 << " ";
    }
}
