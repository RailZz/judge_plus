#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const long long SIZE = 200006;
vector<long long> ts, gr[SIZE], rgr[SIZE], cgr[SIZE], bros[SIZE];
vector<bool> used;
long long N, M;
long long group[SIZE];

void dfsts(long long v) {
    used[v] = true;
    for (long long u : gr[v]) {
        if (!used[u]) {
            dfsts(u);
        }
    }
    ts.push_back(v);
}

void dfscs(long long v, long long comp) {
    used[v] = true;
    group[v] = comp;
    bros[comp].push_back(v);
    for (long long u : rgr[v]) {
        if (!used[u]) {
            dfscs(u, comp);
        } else if (group[u] != comp) {
            cgr[group[u]].push_back(comp);
        }
    }
}

int main() {
    cin >> N >> M;
    used.assign(N, false);
    for (long long i = 0; i < M; i++) {
        long long u, v;
        cin >> u >> v;
        gr[u - 1].push_back(v - 1);
        rgr[v - 1].push_back(u - 1);
    }
    for (long long i = 0; i < N; i++) {
        if (!used[i]) {
            dfsts(i);
        }
    }
    reverse(ts.begin(), ts.end());
    used.assign(N, false);
    long long comp = 0;
    for (long long v : ts) {
        if (!used[v]) {
            dfscs(v, comp);
            comp++;
        }
    }
    cout << comp << endl;
    for (int i = 0; i < N; i++) {
        cout << group[i] + 1 << " ";
    }
    return 0;
}
