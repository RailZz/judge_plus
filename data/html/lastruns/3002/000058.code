#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const long long SIZE = 200006;
vector<long long> ts, gr[SIZE], rgr[SIZE], cgr[SIZE], bros[SIZE];
vector<bool> used;
long long N, P, K;
long long group[SIZE], ans[SIZE];

void dfsts(long long v) {
    used[v] = true;
    for (long long u : gr[v]) {
        if (!used[u]) {
            dfsts(u);
        }
    }
    ts.push_back(v);
}

void dfscs(long long v, long long comp) {
    used[v] = true;
    group[v] = comp;
    bros[comp].push_back(v);
    for (long long u : rgr[v]) {
        if (!used[u]) {
            dfscs(u, comp);
        } else if (group[u] != comp) {
            cgr[group[u]].push_back(comp);
        }
    }
}

int main() {
    cin >> N >> P;
    used.assign(N, false);
    for (long long i = 0; i < N; i++) {
        for (long long j = 0; j < N; j++) {
            char stat;
            cin >> stat;
            if (stat == '+') {
                gr[i].push_back(j);
                rgr[j].push_back(i);
            }
        }
    }

    for (long long i = 0; i < N; i++) {
        if (!used[i]) {
            dfsts(i);
        }
    }
    reverse(ts.begin(), ts.end());
    used.assign(N, false);
    long long comp = 0;
    for (long long v : ts) {
        if (!used[v]) {
            dfscs(v, comp);
            comp++;
        }
    }
    long long l = 0, r = N + 1;
    while (r - l > 1) {
        long long m = (l + r) / 2;
        if (group[m] != group[0]) {
            r = m;
        } else {
            l = m;
        }
    }
    K = l;
    cout << K + 1 << endl;
    long long howmuch = K + 1;
    for (int i = K + 1; i < N; i++) {
        long long l = i, r = N + 1;
        while (r - l > 1) {
            long long m = (l + r) / 2;
            if (group[m] != group[i]) {
                r = m;
            } else {
                l = m;
            }
        }
        long long ingroup = l - i + 1;
        if (howmuch == K + 1) {
            if (K + 1 < ingroup) {
               ans[ingroup] += ingroup;
            }
            howmuch += ingroup;
        } else {
            ans[howmuch + ingroup] += ingroup * (K + 1);
            howmuch += ingroup;
        }
        i = l;
    }
    for (int i = K + 2; i <= N; i++) {
        cout << ans[i] << " ";
    }
    return 0;
}
