#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const long long SIZE = 300000;
vector<long long> ts, gr[SIZE];
vector<bool> used;
long long N, M, timer = 1, sumtime[SIZE], tout[SIZE];

long long dfsts(long long v) {
    used[v] = true;
    for (long long u : gr[v]) {
        if (!used[u]) {
            dfsts(u);
            sumtime[v] += sumtime[u];
        }
    }
    ts.push_back(v);
    tout[v] = timer++;
}

int main() {
    cin >> N;
    for (long long i = 0; i < N; i++) {
        cin >> sumtime[i];
    }
    for (long long i = 0; i < N; i++) {
        long long u, v;
        cin >> u;
        for (long long j = 0; j < u; j++) {
            cin >> v;
            gr[i].push_back(v - 1);
        }
    }
    used.assign(N, false);
    for (long long i = 0; i < N; i++) {
        if (!used[i]) {
            dfsts(i);
        }
    }
    cout << sumtime[0] << " " << tout[0] << endl;
    for (long long i = 0; i < ts.size(); i++) {
        cout << ts[i] + 1 << " ";
        if (ts[i] == 0) {
            return 0;
        }
    }
    return 0;
}
