#include <iostream>
#include <algorithm>
#include <vector>
#include <utility>

using namespace std;

const int size = 12228;

vector<int> gr[size];
vector<int> ts;
vector<bool> used;
vector<int> tout;

int timer = 0;

void dfsts(int v)
{   used[v] = true;
    for (int u : gr[v])
    {
        if (!used[u])
        {
            dfsts(u);
        }
    }
    tout[v] = timer++;
    ts.push_back(v);
}
int main()
{
    tout.resize(size);
    int n, m;
    cin >> n >> m;
    vector<int> Fin;
    vector<int> Sin;
    used.assign(n, false);
    int num = 0;
    for (int i = 0; i < m; ++i)
    {
        int a, b;
        cin >> a >> b;
        Fin.push_back(a - 1);
        Sin.push_back(b - 1);
        gr[a - 1].push_back(b - 1);
    }
    for (int i = 0; i < n; ++i)
    {
        if (!used[i])
        {
            dfsts(i);
        }
    }
    reverse(ts.begin(), ts.end());
    int hooker = 1;
    for (int i =  0; i < m; ++i)
    {
        if (tout[Fin[i]] < tout[Sin[i]])
        {
            hooker = -1;
            break;
        }
    }
    if (hooker == 1)
    {
        cout << "Yes" << endl;
        for (int i = 0; i <= ts.size() - 1; ++i)
        {
            cout << ts[i] + 1 << " ";
        }
    } else {
        cout << "No";
    }
    return 0;
}

