#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;


const int SIZE = 21337;
vector<int> gr[SIZE], rgr[SIZE], cgr[SIZE];
vector<int> ts;
vector<int> used;
vector<int> banditos[SIZE];
int homies[SIZE];

void bfs_ts(int v) {
    used[v] = 1;
    for (int u : gr[v]) {
        if (!used[u]) {
            bfs_ts(u);
        }
    }
    ts.push_back(v);
}

void dfs_cs(int v, int cur_comp) {
    used[v] = 1;
    homies[v] = cur_comp;
    banditos[cur_comp].push_back(v);
    for (int u : rgr[v]) {
        if (!used[u]) {
            dfs_cs(u, cur_comp);
        } else {
            if (homies[u] != cur_comp) {
                cgr[homies[u]].push_back(cur_comp);
            }
        }
    }
}

int main() {
    int n, m;
    cin >> n >> m;
    used.assign(n, 0);
    int v1, v2;
    for (int i = 0; i < m; i++) {
        cin >> v1 >> v2;
        v1--;
        v2--;
        gr[v1].push_back(v2);
        rgr[v2].push_back(v1);
    }

    for (int i = 0; i < n; i++) {
        if (!used[i]) {
            bfs_ts(i);
        }
    }
    reverse(ts.begin(), ts.end());
    used.assign(n, 0);
    int cur_comp = 0;
    for (v : ts) {
        if (!used[v]) {
            dfs_cs(v, cur_comp);
            cur_comp++;
        }
    }
    cout << cur_comp << endl;
    for (int i = 0; i < n; i++) {
        cout << homies[i] + 1 << ' ';
    }
}









