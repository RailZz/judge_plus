#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main()
{
    int n, m;
    cin >> n >> m;
    int i;
    vector<int> w(n + 1);
    vector<int> cost(n + 1);
    for (i = 1; i <= n; ++i)
    {
        cin >> w[i];
    }
    for (i = 1; i <= n; ++i)
    {
        cin >> cost[i];
    }

    vector<vector<long long>> dp;
    dp.resize(n + 1, vector<long long>(m + 1));
    for (i = 0; i <= m; ++i)
    {
        dp[0][i] = 0;
    }
    for (i = 0; i <= n; ++i)
    {
        dp[i][0] = 0;
    }
    for (i = 1; i <= n; ++i)
    {
        for (int j = 1; j <= m; ++j)
        {
            long long second = 0;
            if (j - w[i] > 0)
            {
                second = dp[i - 1][j - w[i]] + cost[i];
            } else {
                if (w[i] <= j)
                {
                    second = cost[i];
                }
            }
            dp[i][j] = max(dp[i - 1][j], second);
        }
    }
    long long ans = 0;
    for (i = 0; i < m; ++i)
    {
        ans = max(ans, dp[n][i]);
    }
    cout << ans;
}
