program Backpack;

const
        SIZE = 100;
        W_SIZE = 10000;
        
type
        TPath = array [0..SIZE, 0..W_SIZE] of LongInt;
        TWeight = array [1..SIZE] of LongInt;
        
procedure PrintPath (const p: TPath; const w: TWeight; r, c: LongInt);
begin
        if r < 1 then
                Exit;
                
        if p[r, c] = 1 then
        begin
                WriteLn (r);
                PrintPath (p, w, r - 1, c - w[r])
        end
        else
                PrintPath (p, w, r - 1, c)
end;
        
var
        s: array [0..SIZE, 0..W_SIZE] of LongInt;
        w: TWeight;
        p: TPath;
        c: array [1..SIZE] of LongInt;
        n, m, i, j, max: LongInt;

begin
        Read (n, m);
        
        for i := 1 to n do
                Read (w[i]);
                
        for i := 1 to n do
                Read (c[i]);
                
        for i := 0 to n do
                for j := 0 to m do
                begin
                        s[i, j] := -1;
                        p[i, j] := 0
                end;
                        
        for i := 0 to n do
                s[i, 0] := 0;
                        
        for i := 1 to n do
                for j := 1 to m do
                begin
                        s[i, j] := s[i - 1, j];
                        
                        if ((j - w[i]) >= 0) and (s[i - 1, j - w[i]] >= 0) and (s[i - 1, j - w[i]] + c[i] > s[i, j]) then
                        begin
                                s[i, j] := s[i - 1, j - w[i]] + c[i];
                                p[i, j] := 1
                        end
                end;
                
        max := 1;
        
        for i := 2 to m do
                if s[n, i] > s[n, max] then
                        max := i;
                        
        PrintPath (p, w, n, max)
end.