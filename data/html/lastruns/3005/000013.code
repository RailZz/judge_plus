#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main()
{
    int n, m;
    cin >> n >> m;
    int i;
    vector<int> w(n + 1);
    vector<int> cost(n + 1);
    vector<vector<pair<int, pair<int, int>>>> parents
    (n + 1, vector<pair<int, pair<int, int>>>(m + 1));
    for (i = 1; i <= n; ++i)
    {
        cin >> w[i];
    }
    for (i = 1; i <= n; ++i)
    {
        cin >> cost[i];
    }

    vector<vector<long long>> dp;
    dp.resize(n + 1, vector<long long>(m + 1));
    for (i = 0; i <= m; ++i)
    {
        dp[0][i] = 0;
        parents[0][i] = {-1, {-1, -1}};
    }
    for (i = 0; i <= n; ++i)
    {
        dp[i][0] = 0;
        parents[i][0] = {-1, {-1, -1}};
    }
    for (i = 1; i <= n; ++i)
    {
        for (int j = 1; j <= m; ++j)
        {
            long long second = 0;
            if (j - w[i] > 0)
            {
                second = dp[i - 1][j - w[i]] + cost[i];
            } else {
                if (w[i] == j)
                {
                    second = cost[i];
                }
            }
            if (dp[i - 1][j] > second)
            {
                dp[i][j] = dp[i - 1][j];
                parents[i][j] = {0, {i - 1, j}};
            } else {
                dp[i][j] = second;
                parents[i][j] = {1, {i - 1, j - w[i]}};
            }
        }
    }
    long long ans = 0;
    for (i = 0; i <= m; ++i)
    {
        if (dp[n][ans] < dp[n][i])
        {
            ans = i;
        }
    }
    i = n;
    int j = ans;
    vector<int> the_final_ans;
    while (parents[i][j].first != -1)
    {
        if (parents[i][j].first)
        {
            the_final_ans.push_back(i);
        }
        int newi, newj;
        newi = parents[i][j].second.first;
        newj = parents[i][j].second.second;
        i = newi;
        j = newj;
    }
    for (i = the_final_ans.size() - 1; i >= 0; --i)
    {
        cout << the_final_ans[i] << " ";
    }
}
