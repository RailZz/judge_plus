#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<long long> a;
vector<long long> t;

int SPECIFIC_INDEX;

long long maxx(int v1, int v2)
{
    if (a[v1] > a[v2])
    {
        return v1;
    }
    return v2;
}

void build(int v, int left, int right)
{
    if (left == right - 1)
    {
        t[v] = left;
        return;
    }
    int m = (left + right) / 2;
    build(2 * v + 1, left, m);
    build(2 * v + 2, m, right);
    t[v] = maxx(t[2 * v + 1], t[2 * v + 2]);
}

long long ask(int v, int left, int right, int askl, int askr)
{
    if (askl >= right || askr <= left)
    {
        return SPECIFIC_INDEX;
    }
    if (askl <= left && right <= askr)
    {
        return t[v];
    }
    int m = (left + right) / 2;
    return maxx(ask(2 * v + 1, left, m, askl, askr), ask(2 * v + 2, m, right, askl, askr));
}

void change(int v, int left, int right, int pos, int val)
{
    if (left == right - 1)
    {
        t[v] = pos;
        a[pos] = val;
        return;
    }
    int m = (left + right) / 2;
    if (pos < m)
    {
        change(2 * v + 1, left, m, pos, val);
    } else {
        change(2 * v + 2, m, right, pos, val);
    }
    t[v] = maxx(t[2 * v + 1], t[2 * v + 2]);
}

int main()
{
    int event, x, y;
    int n;
    cin >> n;
    a.resize(n+1);
    SPECIFIC_INDEX = n;
    for (int i = 0; i < n; ++i)
    {
        cin >> a[i];
    }
    t.resize(4 * n);
    build(0, 0, a.size() - 1);
    int m;
    cin >> m;
    char type;
    for (int i = 0; i < m; ++i)
    {
        cin >> type >> x >> y;
        if (type == 's')
        {
            cout << ask(0, 0, a.size() - 1, x - 1, y) + 1 << " ";
        }
        if (type == 'u')
        {
            change(0, 0, a.size() - 1, x - 1, y);
        }
    }
}
