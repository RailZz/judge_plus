#include <iostream>
#include <string>

using namespace std;

const int SIZE = 500000;
long long int tree[SIZE], a[SIZE];
long long int N, M, X, Y, L, R;
string todo;


void build(long long int v, long long int l, long long int r) {
    if (l == r - 1) {
        if (a[l] == 0) {
            tree[v]++;
        }
        return;
    }
    long long int m = (l + r) / 2;
    build(2 * v + 1, l, m);
    build(2 * v + 2, m, r);
    tree[v] = tree[2 * v + 1] + tree[2 * v + 2];
}

void change(long long int v, long long int l, long long int r,
            long long int pos, long long int val) {
    if (l == r - 1) {
        if (val == 0) {
            tree[v] = 1;
        } else {
            tree[v] = 0;
        }
        return;
    }
    long long int m = (r + l) / 2;
    if (pos < m) {
        change(2 * v + 1, l, m, pos, val);
    } else {
        change(2 * v + 2, m, r, pos, val);
    }
    tree[v] = tree[2 * v + 1] + tree[2 * v + 2];
}

long long int ans(long long int v, long long int l, long long int r,
                  long long int askl, long long int askr) {
    if (askl >= r || askr <= l) {
        return 0;
    }
    if (askl <= l && r <= askr) {
        return tree[v];
    }
    long long int m = (r + l) / 2;
    long long int ans1 = ans(2 * v + 1, l, m, askl, askr);
    long long int ans2 = ans(2 * v + 2, m, r, askl, askr);
    return ans1 + ans2;
}

long long int get_kth(long long int v, long long int l, long long int r, long long int k) {
    if (l == r - 1) {
        return l;
    }
    long long int m = (r + l) / 2;
    if (tree[2 * v + 1] > k) {
        return get_kth(2 * v + 1, l, m, k);
    } else {
        return get_kth(2 * v + 2, m, r, k);
    }
}

int main() {
    cin >> N;
    for (int i = 0; i < N; i++){
        cin >> a[i];
    }
    build(0, 0, N);
    cin >> M;
    for (int i = 0; i < M; i++) {
        cin >> todo;
        if (todo == "u") {
            cin >> X >> Y;
            change(0, 0, N, X - 1, Y);
        }
        if (todo == "s") {
            cin >> L >> R >> X;
            if (X + ans(0, 0, N, 0, L - 1) > ans(0, 0, N, 0, R)) {
                cout << -1 << " ";
            } else {
                cout << get_kth(0, 0, N, X + ans(0, 0, N, 0, L - 1)) << " ";
            }
        }
    }
    return 0;
}
