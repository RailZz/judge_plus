#include <iostream>

using namespace std;

long long int tree[100000], a[100000];
long long int N, todo, X, Y, L, R;

void build(long long int v, long long int l, long long r) {
    if (l == r - 1) {
        tree[v] = a[l];
        return;
    }
    long long int m = (l + r) / 2;
    build(2 * v + 1, l, m);
    build(2 * v + 2, m, r);
    tree[v] = tree[2 * v + 1] + tree[2 * v + 2];
}

void change(long long int v, long long int l, long long r, long long int pos, long long int val) {
    if (l == r - 1) {
        tree[v] += val;
        return;
    }
    long long int m = (r + l) / 2;
    if (pos < m) {
        change(2 * v + 1, l, m, pos, val);
    } else {
        change(2 * v + 2, m, r, pos, val);
    }
    tree[v] = tree[2 * v + 1] + tree[2 * v + 2];
}

long long int ans(long long int v, long long int l, long long r,
                  long long int askl, long long int askr) {
    if (askl >= r || askr <= l) {
        return 0;
    }
    if (askl <= l && r <= askr) {
        return tree[v];
    }
    long long int m = (r + l) / 2;
    return ans(2 * v + 1, l, m, askl, askr) + ans(2 * v + 2, m, r, askl, askr);
}

int main() {
    cin >> N;
    for (int i = 0; i < N; i++) {
        a[i] = 0;
    }
    build(0, 0, N);
    cin >> todo;
    while (todo) {
        if (todo == 1) {
            cin >> X >> Y;
            change(0, 0, N, X - 1, Y);
        }
        if (todo == 2) {
            cin >> L >> R;
            cout << ans(0, 0, N, L - 1, R) << endl << endl;
        }
        cin >> todo;
    }
    return 0;
}
