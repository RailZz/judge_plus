#include <iostream>
#include <string>

using namespace std;

const int SIZE = 500000;
long long int tree[SIZE], a[SIZE];
long long int N, M, X, Y, L, R;
string todo;

long long int Max(long long int index1, long long int index2) {
    if (a[index1] > a[index2]) {
        return index1;
    } else {
        return index2;
    }
}

void build(long long int v, long long int l, long long r) {
    if (l == r - 1) {
        tree[v] = l;
        return;
    }
    long long int m = (l + r) / 2;
    build(2 * v + 1, l, m);
    build(2 * v + 2, m, r);
    tree[v] = Max(tree[2 * v + 1], tree[2 * v + 2]);
}

void change(long long int v, long long int l, long long r, long long int pos, long long int val) {
    if (l == r - 1) {
        a[tree[v]] = val;
        return;
    }
    long long int m = (r + l) / 2;
    if (pos < m) {
        change(2 * v + 1, l, m, pos, val);
    } else {
        change(2 * v + 2, m, r, pos, val);
    }
    tree[v] = Max(tree[2 * v + 1], tree[2 * v + 2]);
}

long long int ans(long long int v, long long int l, long long r,
                  long long int askl, long long int askr) {
    if (askl >= r || askr <= l) {
        return N;
    }
    if (askl <= l && r <= askr) {
        return tree[v];
    }
    long long int m = (r + l) / 2;
    long long int ans1 = ans(2 * v + 1, l, m, askl, askr);
    long long int ans2 = ans(2 * v + 2, m, r, askl, askr);
    return Max(ans1, ans2);
}

int main() {
    cin >> N;
    for (int i = 0; i < N; i++){
        cin >> a[i];
    }
    build(0, 0, N);
    cin >> M;
    for (int i = 0; i < M; i++) {
        cin >> todo;
        if (todo == "u") {
            cin >> X >> Y;
            change(0, 0, N, X - 1, Y);
        }
        if (todo == "s") {
            cin >> L >> R;
            cout << ans(0, 0, N, L - 1, R) + 1 << " ";
        }
    }
    return 0;
}
