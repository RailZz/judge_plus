#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

const int SZ = 100228;
int p[SZ], deep[SZ];
vector<pair<int, pair<int, int>>> edges;
int ans;

int get_par(int v) {
    if (p[v] == v) {
        return v;
    }
    return p[v] = get_par(p[v]);
}

void union1(int v, int u) {
    u = get_par(u);
    v = get_par(v);
    if (u != v) {
        if (deep[u] > deep[v]) {
            swap(u, v);
        }
        p[u] = v;
        if (deep[u] == deep[v]) {
            ++(deep[v]);
        }
    }
}

int main()
{
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < n; ++i) {
        p[i] = i;
        deep[i] = 0;
    }
    for (int i = 0; i < m; ++i) {
        int u, v, w;
        cin >> u >> v >> w;
        edges.push_back({w, {u - 1, v - 1}});
    }
    sort(edges.begin(), edges.end());
    for (auto e : edges) {
        if (get_par(e.second.first) != get_par(e.second.second)) {
            union1(e.second.first, e.second.second);
            ans += e.first;
        }
    }
    cout << ans;
}
