#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> anc;
vector<int> rang;

int get_par(int v)
{
    if (anc[v] == v)
    {
        return v;
    }
    return anc[v] = get_par(anc[v]);
}

void unite(int v, int u)
{
    v = get_par(v);
    u = get_par(u);
    if (rang[u] > rang[v])
    {
        swap(u, v);
    }
    anc[u] = v;
    if (rang[u] == rang[v])
    {
        rang[v]++;
    }
}

int main()
{
    int n, m;
    cin >> n >> m;
    anc.resize(n);
    rang.assign(n, 1);
    vector<pair<int, int>> edgar;
    for (int i = 0; i < n; ++i)
    {
        anc[i] = i;
    }
    for (int i = 0; i < m; ++i)
    {
        int a, b;
        cin >> a >> b;
        edgar.push_back({a, b});
    }
    sort(edgar.begin(), edgar.end());
    int ans = 1;
    for (auto e : edgar)
    {
        if (get_par(e.first) != get_par(e.second))
        {
            unite(e.first, e.second);
            ans++;
        }
    }
    cout << ans;
}