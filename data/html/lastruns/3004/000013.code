#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

const int SIZE = 200000;
long long par[SIZE], d[SIZE];
long long N, M, ans = 0, howmuch = 0;
pair<long long, pair<long long, long long>> edges[SIZE];

long long get_par(long long v) {
    if (par[v] == v) {
        return v;
    }
    return par[v] = get_par(par[v]);
}

void unions(long long u, long long v) {
    u = get_par(u);
    v = get_par(v);
    if (u != v) {
        if (d[u] > d[v]) {
            swap(u, v);
        }
        par[u] = v;
        if (d[u] == d[v]) {
            d[v]++;
        }
    }
}

int main() {
    cin >> N >> M;
    for (int i = 0; i < M; i++) {
        cin >> edges[i].second.first >> edges[i].second.second;
        edges[i].first = 1;
    }
    for (int i = 0; i < N; i++) {
        par[i] = i;
        d[i] = 1;
    }
    for (int i = 0; i < M; i++) {
        long long first = edges[i].second.first;
        long long second = edges[i].second.second;
        if (get_par(first) != get_par(second)) {
            unions(first, second);
            howmuch++;
            if (howmuch == N - 1) {
                cout << i + 1;
                return 0;
            }
        }
    }
    return 0;
}
