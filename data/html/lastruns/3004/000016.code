#include <iostream>
#include <algorithm>
#include <vector>
#include <string>

using namespace std;

const int SIZE = 100000;
long long par[SIZE], d[SIZE];
long long N, M, K;
pair<long long, pair<long long, long long>> edges[SIZE];
pair<string, pair<long long, long long>> asks[SIZE];
vector<string> ans;

long long get_par(long long v) {
    if (par[v] == v) {
        return v;
    }
    return par[v] = get_par(par[v]);
}

void unions(long long u, long long v) {
    u = get_par(u);
    v = get_par(v);
    if (u != v) {
        if (d[u] > d[v]) {
            swap(u, v);
        }
        par[u] = v;
        if (d[u] == d[v]) {
            d[v]++;
        }
    }
}

int main() {
    cin >> N >> M >> K;
    for (int i = 0; i < M; i++) {
        cin >> edges[i].second.first >> edges[i].second.second;
        edges[i].first = 1;
    }
    for (int i = 0; i < N; i++) {
        par[i] = i;
        d[i] = 1;
    }
    for (int i = K - 1; i >= 0; i--) {
        cin >> asks[i].first >> asks[i].second.first >> asks[i].second.second;
    }
    for (int i = 0; i < K; i++) {
        if (asks[i].first == "ask") {
            long long first = asks[i].second.first - 1;
            long long second = asks[i].second.second - 1;
            if (get_par(first) == get_par(second)) {
                ans.push_back("YES\n");
            } else {
                ans.push_back("NO\n");
            }
        } else {
            long long first = asks[i].second.first - 1;
            long long second = asks[i].second.second - 1;
            if (get_par(first) != get_par(second)) {
                unions(first, second);
            }
        }
    }
    reverse(ans.begin(), ans.end());
    for (auto a : ans) {
        cout << a;
    }
    return 0;
}
