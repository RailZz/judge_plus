#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> p;
vector<int> d;
vector<pair<int, pair<int, int>>> gr;

int get_par(int v) {
    if (p[v] == v) {
        return v;
    }
    return p[v] = get_par(p[v]);
}

void unity(int u, int v) {
    u = get_par(u);
    v = get_par(v);
    if (u != v) {
        if (d[u] > d[v]) {
            swap(u, v);
        }
        p[u] = v;
        if (d[u] == d[v]) {
            d[v]++;
        }
    }
}

int main() {
    int n, m, ans = 0;
    cin >> n >> m;
    p.resize(n);
    d.resize(n, 0);
    vector<pair<int, int>> gr_ans1;
    for (int i = 0; i < n; i++) {
        p[i] = i;
    }
    for (int i = 0; i < m; i++) {
        int u, v, m;
        cin >> u >> v >> m;
        u--;
        v--;
        gr.push_back({m, {u, v}});
    }
    sort(gr.begin(), gr.end());
    for (auto e : gr) {
        if (get_par(e.second.first) != get_par(e.second.second)) {
            unity(e.second.first, e.second.second);
            ans += e.first;
            gr_ans1.push_back({e.second.first, e.second.second});
        }
    }
    /*for (int i = 0; i < n - 1; i++) {
        cout << "{" << gr_ans1[i].first << ", " << gr_ans1[i].second << "}  ";
    }*/
    cout << ans << ' ';
    int answer = 2147483000;
    for (int step = 0; step < n - 1; step++) {
        int flag = 0;
        int ans1 = 0;
        p.resize(n);
        d.resize(n, 0);
        for (int i = 0; i < n; i++) {
            p[i] = i;
        }
        for (auto e : gr) {
            if ((e.second != gr_ans1[step]) && (get_par(e.second.first)
                                                 != get_par(e.second.second))) {
                unity(e.second.first, e.second.second);
                ans1 += e.first;
                flag++;
            }
        }
        if (flag == n - 1) {
            if (ans1 < answer) {
                answer = ans1;
            }
        }
    }
    cout << answer;
}
