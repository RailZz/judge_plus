#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

vector<int> p;
vector<int> d;

int get_par(int v)
{
    if (p[v] == v)
    {
        return v;
    }
    return p[v] = get_par(p[v]);
}

void unionn(int v, int u)
{
    v = get_par(v);
    u = get_par(u);
    if (u != v)
    {
        if (d[u] > d[v])
        {
            swap(u, v);
        }
        p[u] = v;
        if (d[u] == d[v]) ++d[v];
    }
}

int main()
{
    int n, m;
    int i;
    cin >> n >> m;
    vector<pair<int, pair<int, int>>> edges;
    int w_ans = 0;
    for (i = 0; i < m; ++i)
    {
        int a, b, c;
        cin >> a >> b >> c;
        edges.push_back({c, {a - 1, b - 1}});
    }
    p.resize(n);
    d.resize(n, 0);
    for (int i = 0; i < n; ++i)
    {
        p[i] = i;
    }
    sort(edges.begin(), edges.end());
    for (auto e : edges)
    {
        if (get_par(e.second.first) != get_par(e.second.second))
        {
            unionn(e.second.first, e.second.second);
            w_ans += e.first;
        }
    }
    cout << w_ans;
}
