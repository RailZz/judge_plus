#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> p;
vector<int> d;
vector<pair<int, pair<int, int>>> gr;

int get_par(int v) {
    if (p[v] == v) {
        return v;
    }
    return p[v] = get_par(p[v]);
}

void unity(int u, int v) {
    u = get_par(u);
    v = get_par(v);
    if (u != v) {
        if (d[u] > d[v]) {
            swap(u, v);
        }
        p[u] = v;
        if (d[u] == d[v]) {
            d[v]++;
        }
    }
}

int main() {
    int n, m;
    cin >> n >> m;
    p.resize(n);
    d.resize(n, 0);
    for (int i = 0; i < n; i++) {
        p[i] = i;
    }
    int prom = 0, ans = 0;
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        if (get_par(u) != get_par(v)) {
            unity(u, v);
            ans += prom + 1;
            prom = 0;
        }
        else {
            prom++;
        }
    }
    cout << ans;
}
