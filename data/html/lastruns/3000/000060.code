#include <iostream>
#include <vector>
#include <string>
#include <random>
#include <algorithm>
#include <time.h>
using namespace std;

vector<long long> Hash1, Hash2;
vector<long long> st1, st2;
long long Mod, p;
long long len_str1, len_str2;
vector<long long> str1, str2;

int subHash(int l, int r, const vector<long long>
    &Hash, const vector<long long> & st) {
  if (r < l) {
    return 0;
  }
  long long big = Hash[r];
  long long small = 0;
  if (l) {
    small = (Hash[l - 1] * st[r - l + 1]) % Mod;
  }
  return (big + Mod - small) % Mod;
}

int main() {
  srand(time(NULL));
  long long Mod_arr[4] = {1000000007, 1000000011, 1073676287, 2971215073};
  long long p_arr[4] = {41, 43, 47, 53};
  Mod = Mod_arr[rand() % 4];
  p = p_arr[rand() % 4];
  int gg, gg1;
  cin >> gg >> gg1;
  len_str1 = gg;
  len_str2 = gg;
  str1.resize(len_str1);
  str2.resize(len_str2);
  for (int i = 0; i < gg; i++) {
    cin >> gg1;
    str2[i] = gg1;
    str1[len_str1 - i - 1] = gg1;
  }

  Hash1.resize(len_str1);
  st1.resize(len_str1);
  Hash2.resize(len_str2);
  st2.resize(len_str2);

  Hash1[0] = str1[0];
  st1[0] = 1;
  for (int i = 1; i < len_str1; i++) {
    Hash1[i] = (Hash1[i - 1] * p + str1[i]) % Mod;
  }
  for (int i = 1; i < len_str1; i++) {
    st1[i] = (st1[i - 1] * p) % Mod;
  }

  Hash2[0] = str2[0];
  st2[0] = 1;
  for (int i = 1; i < len_str2; i++) {
    Hash2[i] = (Hash2[i - 1] * p + str2[i]) % Mod;
  }
  for (int i = 1; i < len_str2; i++) {
    st2[i] = (st2[i - 1] * p) % Mod;
  }

  for (int i = (len_str1 + 1) / 2; i < len_str1; i++) {
    if (subHash(i, len_str1 - 1, Hash1, st1) ==
        subHash(len_str1 - i, (len_str1 - i) * 2 - 1, Hash2, st2)) {
      cout << i << ' ';
    }
  }
  cout << len_str1;
}
