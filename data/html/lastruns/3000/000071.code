#include <bits/stdc++.h>

using namespace std;

vector <long long> pow_memory;

bool check(string t, string s, int need)
{
    //cout << "checking " << t << " in " << s;
    //string s, t, diez = "#";
    //long long seeds[8] = {29, 31, 37, 41, 43, 1000000007, 1000000009, 2000000011};
    long long p = 37;//seeds[rand() % 5];
    long long mod = 1000000007; //seeds[rand() % 4 + 5];
    int i;

    vector <long long> hash_s(s.size());
    hash_s[0] = s[0];
    //cout << "hashing s: " << endl;
    for (i = 1; i < s.size(); ++i)
    {
        hash_s[i] = ((long long) hash_s[i - 1] * p % mod + s[i]) % mod;
        //cout << hash_s[i] << endl;
    }
    //cout << endl;
    vector <long long> hash_t(t.size());
    hash_t[0] = t[0];
    for (i = 1; i < t.size(); ++i)
    {
        hash_t[i] = (hash_t[i - 1] * p % mod + t[i]) % mod;
    }

    long long hashed_t = hash_t[t.size() - 1];
    //cout << "t_hashed = " << hashed_t << endl;

    for (i = 0; i <= s.length() - t.length(); ++i)
    {
        //find subhash
        long long big = hash_s[i + t.size() - 1];
        long long small = 0;
        if (i != 0)
        {
            small = (long long) hash_s[i - 1] * pow_memory[t.size()] % mod;
        }
        long long subhash = (big - small + mod) % mod;
        //cout << subhash << endl;
        if (subhash == hash_t[t.size() - 1])
        {
            if (i == need)
            {
                //cout << " - true" << endl;
                return true;
            }
            //cout << i << " ";
        }
    }
    //cout << " - false" << endl;
    return false;
}


int main()
{
    string s1, s2;
    long long p = 37;//seeds[rand() % 5];
    long long mod = 1000000007; //seeds[rand() % 4 + 5];
    int i;
    cin >> s1 >> s2;
    pow_memory.resize(s1.length() + 1, 0);
    pow_memory[0] = 1;
    for (i = 1; i <= s1.length(); ++i)
    {
        pow_memory[i] = pow_memory[i - 1] * p % mod;
    }
    vector <long long> hash_s1(s1.size());
    hash_s1[0] = s1[0];
    for (i = 1; i < s1.size(); ++i)
    {
        hash_s1[i] = ((long long) hash_s1[i - 1] * p % mod + s1[i]) % mod;
    }
    for (int moving = 0; moving < s1.size(); ++moving)
    {
        //cout << "moving = " << moving << endl;
        if (check(s1.substr(0, s1.length() - moving), s2, moving) && check(s1.substr(s1.length() - moving, moving), s2, 0))
        {
            cout << moving;
            return 0;
        }
    }
    cout << "-1";
}
