#include <iostream>
#include <vector>
#include <queue>
#include <cmath>

using namespace std;

vector< vector<long long> > vec;
vector<long long> used;
int is_cycle = 0;

void dfs(long long v)
{
	used[v] = 1;
	for (auto &i:vec[v])
	{
		if (used[i] == 0)
		{
			dfs(i);
		} else if (used[i] == 1) {
            is_cycle = 1;
		}
	}
	used[v] = 2;
};

int main()
{
	long long n;
    cin >> n;
    used.resize(n, 0);
    vec.resize(n);
    vector< vector<long long> > ar(n, vector<long long>(n, 0));
	for (long long i = 0; i < n; i++)
    {
        for (long long j = 0; j < n; j++)
        {
            cin >> ar[i][j];
        }
    }
    for (long long i = 0; i < n; i++)
    {
        for (long long j = 0; j < n; j++)
        {
            if (ar[i][j] == 1)
            {
                vec[i].push_back(j);
            }
        }
    }
    for (long long i = 0; i < n; i++)
    {
        dfs(i);
    }
    if (is_cycle)
    {
        cout << 1;
    } else {
        cout << 0;
    }
    return 0;
}