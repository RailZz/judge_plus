#include <iostream>
#include <queue>
#include <vector>
using namespace std;
vector<vector<int> > edges;
vector <int> doroga;
 
int start;
int d[100],mark[100],m[100][100],v[100],p[100];
void BFS()
{
    queue<int> q;
    q.push(start);
    p[start]=-1;
    d[start] = 0;
    mark[start] = 1;
    while (!q.empty())
    {
        int v = q.front();
        q.pop();
        for (int i = 0; i < (int)edges[v].size(); ++i)
        {
            if (mark[edges[v][i]] == 0)
            {
                d[edges[v][i]] = d[v] + 1;
                p[edges[v][i]]= v;
                mark[edges[v][i]] = 1;
                q.push(edges[v][i]);
            }
        }
    }
}
 
int main()
{
setlocale(LC_ALL, "Rus");
int n,k,en,st;
cin>>n;
edges.resize(n);
for(int i=0;i<n;i++)
    for (int j=0;j<n;j++)
    cin>>m[i][j];
 
for (int i=0;i<n;i++) {k=0;
    for (int j=0;j<n;j++)
    if ( m[i][j] ==1) { edges[i].push_back(j);k++;}
}
cin>>st>>en;
start=st-1;
 
BFS();
if (!mark) cout<<-1; else if (en==st) cout<<0; else {
cout<<d[en-1];
cout<<endl;
 
 
    for (int v=en;v!=-1;v=p[v]) doroga.push_back(v+1);
 
    for(int i=doroga.size()-1;i>0;i--) cout<<doroga[i]<<' ';
cout<<en;
	}
}
