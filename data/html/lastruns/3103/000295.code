#include <iostream>
#include <vector>
#include <queue>
#include <cmath>

using namespace std;

vector< vector<int> > vec;
vector<int> used;
int inf=100000000;

int main()
{
	int n, s;
    vector<int> d, p;
    cin >> n;
    d.resize(n);
    p.resize(n, -1);
	vec.resize(n);
	used.resize(n);
	vector< vector<int> > ar(n, vector<int>(n, 0));
	for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cin >> ar[i][j];
        }
    }
    int f;
    cin >> s >> f;
    s -= 1;
    f -= 1;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++)
        {
            if (ar[i][j] == 1)
            {
                vec[i].push_back(j);
            }
        }
    }
    queue<int> q;
    p[s] = -1;
    used[s] = 1;
    for (int i = 0; i < n; i++)
    {
        d[i] = inf;
    }
    d[s] = 0;
    q.push(s);
    int c;
    while (!q.empty())
    {
        c = q.front();

        q.pop();
        for (auto &u: vec[c])
        {
            if (used[u] == 0)
            {
                q.push(u);
                d[u] = d[c] + 1;
                used[u] = 1;
                p[u] = c;
            }
        }
    }
    vector<int> ans;
    ans.push_back(f);
    c = f;
    if (d[f] == inf) {
        cout << -1;
        return 0;
    }
    while (c != s)
    {
        c = p[c];
        ans.push_back(c);
    }
    int size_ans = ans.size();
    if (size_ans == 1)
    {
        cout << size_ans;
        return 0;
    } else {
        cout << size_ans - 1<< endl;
        for (int i = size_ans - 1; i >= 0; i--)
        {
            cout << ans[i] + 1<< " ";
        }
    }
    return 0;
}