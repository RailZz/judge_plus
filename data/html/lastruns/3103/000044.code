#include <iostream>
#include <vector>
using namespace std;
vector <int> used;
vector <int> p;
vector < vector<int> > gr;
void dfs (int i, int pr)
{
	used[i]++;
	for (auto u: gr[i])
	{
		if (used[u]==0)
		{
			pr=i;
			p[i]=pr;
			dfs(u, pr);
		}
		else
		{
			if (u!=p[u])
			{
				used[u]++;
				return;
			}
		}
	}
}
int main ()
{
	int N;
	cin >> N;
	gr.resize(N);
	used.resize(N);
	p.resize(N); 
	vector < vector<int> > G(N);
	for (int i=0;i<N;i++)
	{
		G[i].resize(N);
		for (int j=0;j<N;j++)
		{
			cin >> G[i][j];
			if (G[i][j]==1)
			{
				gr[i].push_back(j);
				gr[j].push_back(i);
			}
		}
	}
	dfs(0, 0);
	bool f = 0;
	for (int i=0;i<N;i++)
	{
		if (used[i]==0||used[i]>1)
		{
			f=1;
			break;
		}
			
	}
	if (f)
		cout << 1;
	else
		cout << 0;
}
