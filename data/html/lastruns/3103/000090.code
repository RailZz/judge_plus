#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector <vector <int> > gr;
vector <int> dist;
vector <int> parent;
vector <int> used;
int start, finish;
queue <int> q;

void unterBfs ()
{
    if (!q.empty())
    {
        int a = q.front();
        q.pop();

        for (auto u: gr[a])
        {
            if (!used[u])
            {
                dist[u] = dist[a] + 1;
                used[u] = 1;
                q.push(u);
                parent[u] = a;
            }
        }
        unterBfs();
    }
}

int main()
{
    int n;
    cin >> n;
    gr.resize(n);
    used.resize(n, 0);
    dist.resize(n, 0);
    parent.resize(n);
    int inp;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cin >> inp;
            if (inp)
            {
                gr[i].push_back(j);
            }
        }
    }

    cin >> start >> finish;
    start--;
    finish--;
    q.push(start);
    used[start] = 1;
    parent[start] = -1;
    unterBfs();
    if (!used[finish])
    {
        cout << -1;
    }
    else
    {
        cout << dist[finish] << '\n';
        vector <int> way;
        for (int i = finish; i != -1; i = parent[i])
        {
            way.push_back(i);
        }
        for (unsigned int i = way.size(); i > 0; i--)
        {
            cout << way.back() + 1 << ' ';
            way.pop_back();
        }
    }
    return 0;
}
