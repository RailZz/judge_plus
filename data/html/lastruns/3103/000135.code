#include <iostream>
#include <vector>
#include <queue>

using namespace std;

vector <vector <int> > dist;
vector <vector <pair <int, int> > > parent;
vector <vector <int> > used;
queue <pair <int, int> > q;
const int dx[] = {-2, -2, -1, -1, 1, 1, 2, 2};
const int dy[] = {-1, 1, 2, -2, 2, -2, 1, -1};
void unterBfs ()
{
    if (!q.empty())
    {
        pair <int, int> a = q.front();
        q.pop();

        for (int i = 0; i < 8; i++)
        {
                if ((a.first + dx[i] > -1) && (a.first + dx[i] < used.size()) && (a.second + dy[i] > -1) && (a.second + dy[i] < used.size()) && (!used[a.first + dx[i]][a.second + dy[i]]))
                {
                    dist[a.first + dx[i]][a.second + dy[i]] = dist[a.first][a.second] + 1;
                    used[a.first + dx[i]][a.second + dy[i]] = 1;
                    q.push(make_pair(a.first + dx[i],a.second + dy[i]));
                    parent[a.first + dx[i]][a.second + dy[i]] = a;
                }
        }
        unterBfs();
    }
}

int main()
{
    int n;
    cin >> n;
    used.resize(n, vector <int> (n));
    dist.resize(n, vector <int> (n));
    parent.resize(n, vector <pair <int, int> > (n));
    int xSt, ySt, xFin, yFin;
    cin >> xSt >> ySt >> xFin >> yFin;
    xSt--;
    xFin--;
    ySt--;
    yFin--;

    q.push(make_pair(xSt, ySt));
    used[xSt][ySt] = 1;
    parent[xSt][ySt] = make_pair(-1, -1);
    unterBfs();
    cout << dist[xFin][yFin] << '\n';
    vector <pair <int, int> > way;
    for (pair <int, int> i = make_pair(xFin, yFin); i != parent[xSt][ySt]; i = parent[i.first][i.second])
    {
        way.push_back(i);
    }
    for (unsigned int i = way.size(); i > 0; i--)
    {
        cout << way.back().first + 1 << ' ' << way.back().second + 1 << '\n';
        way.pop_back();
    }
    return 0;
}
