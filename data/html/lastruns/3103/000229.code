#include <iostream>
#include <cmath>
#include <vector>

using namespace std;

vector <vector<int>> gr;
vector <int> used;
bool cycle = false;

void dfs(int v)
{
    used[v] = 1;
    for (auto u: gr[v])
    {
        if (used[u] == 0) {
            dfs(u);
        }
        else if (used[u] == 1) cycle = true;
    }
    used[v] = 2;
}

int main()
{
    int n, i;
    cin >> n;
    used.resize(n + 1);
    gr.resize(n + 1);
    int matrix[n][n];
    for (i = 0; i < n; i++){
       for (int j = 0; j < n; j++)
       {
           cin >> matrix[i][j];
           if (matrix [i][j] == 1){
               gr[i + 1].push_back(j + 1);
           }
       }
    }
    
    for (int i = 1; i <= n; ++i)
        if (used[i] == 0) {
            dfs(i);
    
        }
    
    if (cycle)
    {
        cout << 1;
    } else {
        cout << 0;
    }
    return 0;
}