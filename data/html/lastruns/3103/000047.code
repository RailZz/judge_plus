#include <iostream>
#include <vector>

using namespace std;

vector <vector <int> > gr;
vector <int> used;
vector <int> connectivityCnt;
vector <vector <int> > connectivityElem(1);
int cntIn = 0;

void dfs (int v, int index)
{
    cntIn++;
    connectivityElem[index].push_back(v);
    used[v] = 1;
    for (auto u: gr[v])
    {
        if (!used[u])
        {
            dfs(u, index);
        }
    }
}

int main()
{
    int n, m;
    cin >> n >> m;
    gr.resize(n);
    used.resize(n);

    int a, b;
    for (int i = 0; i < m; i++)
    {
        cin >> a >> b;
        gr[a - 1].push_back(b - 1);
        gr[b - 1].push_back(a - 1);
    }

    int cntAll = 0;

    for (int i = 0; i < n; i++)
    {
        if (used[i] == 0)
        {
            connectivityElem.resize(cntAll + 1);
            dfs(i, cntAll);
            cntAll++;
            connectivityCnt.push_back(cntIn);
            cntIn = 0;
        }
    }

    cout << cntAll << '\n';
    for (int i = 0; (unsigned int)i < connectivityCnt.size(); i++)
    {
        cout << connectivityCnt[i] << '\n';
        for (int k = 0; (unsigned int)k < connectivityElem[i].size(); k++)
        {
            cout << connectivityElem[i][k] + 1 << ' ';
        }
        cout << '\n';
    }
    return 0;
}
