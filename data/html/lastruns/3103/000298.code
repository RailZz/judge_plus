#include <iostream>
#include <vector>
#include <queue>
#include <cmath>

using namespace std;

vector< vector<char> > field;
vector< vector<int> > vec;
vector< vector<int> > used;
vector<int> dx = {0, 1, 0, -1};
vector<int> dy = {-1, 0, 1, 0};

void dfs(int x, int y)
{
	used[x][y] = 1;
    for (int d = 0; d < 3; d++)
	{
		int nx = x + dx[d];
		int ny = y + dy[d];
		int size_field = field.size();
		if (0 < nx && nx < size_field && 0 < ny && ny < size_field && field[nx][ny] == '.')
        {
            if (used[nx][ny] == 0)
            {
                dfs(nx, ny);
            }
        }
	}
};

int main()
{
	int n;
    cin >> n;
    field.resize(n, vector<char>(n, '*'));
    used.resize(n, vector<int>(n));
	for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cin >> field[i][j];
        }
    }
    int x, y;
    cin >> x >> y;
    x -= 1;
    y -= 1;
    dfs(x, y);
    int Count = 0;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (used[i][j] == 1)
            {
                Count++;
            }
        }
    }
    cout << Count;
    return 0;
}